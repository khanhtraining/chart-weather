import React, { useLayoutEffect } from 'react'
import './chart.scss'
import * as d3 from 'd3'

export const ChartContainer = (props) => {
    useLayoutEffect(() => {
        const Svg = d3.select(".svgchart")
            .append("svg")
        const g = Svg.append("g")
            .attr('class', 'weather-container')

        const x = d3.scalePoint()
            .domain(((props.chartData).map(function (d) { return d.hour })))
        const y = d3.scaleLinear()
            .domain([0, 3])
        const xAxis = g.append("g")
            .style('color', '#000')
        const yAxis = g.append("g")

        const lineTidePath = d3.area()
            .x(function (d) { return x(d.hour) })
            .y(function (d) { return y(d.tide) })
            .curve(d3.curveBumpX),
            lineSunPath = d3.area()
                .x(function (d) { return x(d.hour) })
                .y(function (d) { return y(d.sun) })
                .curve(d3.curveMonotoneX)

        const lineTideMain = () => {
            g.append('path')
                .data([(props.chartData)])
                .attr('class', 'line-tide')
                .style("stroke", '#0affe840')
                .attr('d', lineTidePath)
        }
        const lineSunMain = () => {
            g.append('path')
                .data([(props.chartData)])
                .attr('class', 'line-sun')
                .style("stroke", 'orange')
                .style("stroke-width", '2px')
                .style("fill", 'none')
                .attr('d', lineSunPath)
        }
        const lineRemove = () => {
            g.selectAll('path')
                .data([(props.chartData)])
                .exit()
                .remove('path')
        }

        const drawChart = () => {
            const currentWidth = parseInt(d3.select('.svgchart').style('width'), "100%")
            const currentHeight = parseInt(d3.select('.svgchart').style('height'), "100%")
            Svg.attr("width", currentWidth * 6)
                .attr('height', currentHeight)
            x.range([0, currentWidth * 6])
            xAxis.call(d3.axisBottom(x).ticks(2)).attr("transform", `translate(0,${currentHeight})`)
            y.range([currentHeight, 0]);
            yAxis.call(d3.axisLeft(y))
            const area = d3.area()
                .x(function (d) { return x(d.hour); })
                .y0(currentHeight)
                .y1((function (d) { return y(d.tide); }))
                .curve(d3.curveBumpX)

            g.append('path')
                .data((props.chartData))
                .attr('class', 'area')
                .attr('d', area((props.chartData)))
                .attr('fill', '#0affe840')
            lineTideMain()
            lineSunMain()
            //replace
            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-line')
                .attr('x', function (d) { return x(d?.hour) })
                .attr("y", function (d) { return y(d?.tide) })
                .attr("width", currentWidth / 2)
                .attr("height", 0)
                .style("fill", 'gray')
                .style("opacity", 0.3)
                .attr("transform", `translate(0,${0})`)
            //rect
            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[0]?.hour) })
                .attr("y", function (d) { return y(d[0]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[1]?.hour) })
                .attr("y", function (d) { return y(d[1]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[2]?.hour) })
                .attr("y", function (d) { return y(d[2]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[3]?.hour) })
                .attr("y", function (d) { return y(d[3]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[4]?.hour) })
                .attr("y", function (d) { return y(d[4]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[5]?.hour) })
                .attr("y", function (d) { return y(d[5]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[6]?.hour) })
                .attr("y", function (d) { return y(d[6]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[7]?.hour) })
                .attr("y", function (d) { return y(d[7]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[8]?.hour) })
                .attr("y", function (d) { return y(d[8]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[9]?.hour) })
                .attr("y", function (d) { return y(d[9]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[10]?.hour) })
                .attr("y", function (d) { return y(d[10]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[11]?.hour) })
                .attr("y", function (d) { return y(d[11]?.tide) })

            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-infor')
                .attr('x', function (d) { return x(d[12]?.hour) })
                .attr("y", function (d) { return y(d[12]?.tide) })

            //[0]moon
            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-line')
                .attr('x', function (d) { return x(d[0]?.hour) })
                .attr("y", function (d) { return y(d[0]?.tide) })
                .attr("width", currentWidth / 2)
                .attr("height", currentHeight * 4)
                .attr("transform", `translate(0,${currentHeight - currentHeight * 3})`)
            //[3],[4]
            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-line')
                .attr('x', function (d) { return x(d[3]?.hour) })
                .attr("y", function (d) { return y(d[3]?.tide) })
                .attr("width", currentWidth / 2)
                .attr("height", currentHeight * 4)
                .attr("transform", `translate(0,${currentHeight - currentHeight * 3})`)
            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-line')
                .attr('x', function (d) { return x(d[4]?.hour) })
                .attr("y", function (d) { return y(d[4]?.tide) })
                .attr("width", currentWidth / 2)
                .attr("height", currentHeight * 4)
                .attr("transform", `translate(0,${currentHeight - currentHeight * 3})`)
            //[7],[8]
            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-line')
                .attr('x', function (d) { return x(d[7]?.hour) })
                .attr("y", function (d) { return y(d[7]?.tide) })
                .attr("width", currentWidth / 2)
                .attr("height", currentHeight * 4)
                .attr("transform", `translate(0,${currentHeight - currentHeight * 3})`)
            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-line')
                .attr('x', function (d) { return x(d[8]?.hour) })
                .attr("y", function (d) { return y(d[8]?.tide) })
                .attr("width", currentWidth / 2)
                .attr("height", currentHeight * 4)
                .attr("transform", `translate(0,${currentHeight - currentHeight * 3})`)
            //[11],[12]
            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-line')
                .attr('x', function (d) { return x(d[11]?.hour) })
                .attr("y", function (d) { return y(d[11]?.tide) })
                .attr("width", currentWidth / 2)
                .attr("height", currentHeight * 4)
                .attr("transform", `translate(0,${currentHeight - currentHeight * 3})`)
            g.append('rect')
                .data(([props.chartData]))
                .attr("class", 'rect-line')
                .attr('x', function (d) { return x(d[12]?.hour) })
                .attr("y", function (d) { return y(d[12]?.tide) })
                .attr("width", currentWidth / 2)
                .attr("height", currentHeight * 4)
                .attr("transform", `translate(0,${currentHeight - currentHeight * 3})`)
            //text [0]
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[0]?.hour) })
                .attr("y", function (d) { return y(d[0]?.tide) })
                .text(function (d) { return d[0].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[0]?.hour) })
                .attr("y", function (d) { return y(d[0]?.tide) })
                .text(function (d) { return d[0].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[0]?.hour) })
                .attr("y", function (d) { return y(d[0]?.tide) })
                .text(`m`)
            //1
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[1]?.hour) })
                .attr("y", function (d) { return y(d[1]?.tide) })
                .text(function (d) { return d[1].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[1]?.hour) })
                .attr("y", function (d) { return y(d[1]?.tide) })
                .text(function (d) { return d[1].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[1]?.hour) })
                .attr("y", function (d) { return y(d[1]?.tide) })
                .text(`m`)
            //2
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[2]?.hour) })
                .attr("y", function (d) { return y(d[2]?.tide) })
                .text(function (d) { return d[2].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[2]?.hour) })
                .attr("y", function (d) { return y(d[2]?.tide) })
                .text(function (d) { return d[2].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[2]?.hour) })
                .attr("y", function (d) { return y(d[2]?.tide) })
                .text(`m`)
            //3
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[3]?.hour) })
                .attr("y", function (d) { return y(d[3]?.tide) })
                .text(function (d) { return d[3].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[3]?.hour) })
                .attr("y", function (d) { return y(d[3]?.tide) })
                .text(function (d) { return d[3].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[3]?.hour) })
                .attr("y", function (d) { return y(d[3]?.tide) })
                .text(`m`)
            //4
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[4]?.hour) })
                .attr("y", function (d) { return y(d[4]?.tide) })
                .text(function (d) { return d[4].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[4]?.hour) })
                .attr("y", function (d) { return y(d[4]?.tide) })
                .text(function (d) { return d[4].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[4]?.hour) })
                .attr("y", function (d) { return y(d[4]?.tide) })
                .text(`m`)
            //5
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[5]?.hour) })
                .attr("y", function (d) { return y(d[5]?.tide) })
                .text(function (d) { return d[5].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[5]?.hour) })
                .attr("y", function (d) { return y(d[5]?.tide) })
                .text(function (d) { return d[5].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[5]?.hour) })
                .attr("y", function (d) { return y(d[5]?.tide) })
                .text(`m`)
            //6
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[6]?.hour) })
                .attr("y", function (d) { return y(d[6]?.tide) })
                .text(function (d) { return d[6].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[6]?.hour) })
                .attr("y", function (d) { return y(d[6]?.tide) })
                .text(function (d) { return d[6].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[6]?.hour) })
                .attr("y", function (d) { return y(d[6]?.tide) })
                .text(`m`)
            //7
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[7]?.hour) })
                .attr("y", function (d) { return y(d[7]?.tide) })
                .text(function (d) { return d[7].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[7]?.hour) })
                .attr("y", function (d) { return y(d[7]?.tide) })
                .text(function (d) { return d[7].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[7]?.hour) })
                .attr("y", function (d) { return y(d[7]?.tide) })
                .text(`m`)
            //8
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[8]?.hour) })
                .attr("y", function (d) { return y(d[8]?.tide) })
                .text(function (d) { return d[8].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[8]?.hour) })
                .attr("y", function (d) { return y(d[8]?.tide) })
                .text(function (d) { return d[8].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[8]?.hour) })
                .attr("y", function (d) { return y(d[8]?.tide) })
                .text(`m`)
            //9
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[9]?.hour) })
                .attr("y", function (d) { return y(d[9]?.tide) })
                .text(function (d) { return d[9].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[9]?.hour) })
                .attr("y", function (d) { return y(d[9]?.tide) })
                .text(function (d) { return d[9].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[9]?.hour) })
                .attr("y", function (d) { return y(d[9]?.tide) })
                .text(`m`)
            //10
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[10]?.hour) })
                .attr("y", function (d) { return y(d[10]?.tide) })
                .text(function (d) { return d[10].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[10]?.hour) })
                .attr("y", function (d) { return y(d[10]?.tide) })
                .text(function (d) { return d[10].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[10]?.hour) })
                .attr("y", function (d) { return y(d[10]?.tide) })
                .text(`m`)
            //11
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[11]?.hour) })
                .attr("y", function (d) { return y(d[11]?.tide) })
                .text(function (d) { return d[11].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[11]?.hour) })
                .attr("y", function (d) { return y(d[11]?.tide) })
                .text(function (d) { return d[11].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[11]?.hour) })
                .attr("y", function (d) { return y(d[11]?.tide) })
                .text(`m`)
            //12
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_hour')
                .attr('x', function (d) { return x(d[12]?.hour) })
                .attr("y", function (d) { return y(d[12]?.tide) })
                .text(function (d) { return d[12].hour })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide')
                .attr('x', function (d) { return x(d[12]?.hour) })
                .attr("y", function (d) { return y(d[12]?.tide) })
                .text(function (d) { return d[12].tide })
            g.append('text')
                .data(([props.chartData]))
                .attr("class", 'text-infor_tide--m')
                .attr('x', function (d) { return x(d[12]?.hour) })
                .attr("y", function (d) { return y(d[12]?.tide) })
                .text(`m`)

        }
        const rectRemove = () => {
            g.selectAll('rect')
                .data([(props.chartData)])
                .exit()
                .remove('rect')
        }
        const textRemove = () => {
            g.selectAll('text')
                .data([(props.chartData)])
                .exit()
                .remove('text')
        }
        const remove = () => {
            lineRemove()
            rectRemove()
            textRemove()
        }
        drawChart()

        window.addEventListener('resize', remove)
        window.addEventListener('resize', drawChart)
    }, [])

    return (
        <div className='layout__container-chart'>
            <div className='svgchart'></div>
            <div className='layout__container-chart--title'>
                <span className='blue-title'>Tide •</span>
                <span className='orange-title'>Sunrise &amp; Sunset</span>
            </div>
        </div>
    )
}

export default ChartContainer
